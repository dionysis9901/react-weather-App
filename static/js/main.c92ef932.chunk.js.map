{"version":3,"sources":["components/weatherApp.js","App.js","serviceWorker.js","index.js"],"names":["WeatherApp","props","state","long","lat","timezone","summary","temperature","icon","ref","React","createRef","toCelsius","bind","document","tittle","navigator","geolocation","getCurrentPosition","position","setState","coords","longitude","latitude","api","fetch","then","res","json","data","console","log","currently","iconModded","replace","toUpperCase","temperatureCel","Math","floor","alert","f","this","timzone","className","height","width","color","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"uTAGqBA,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,KACNC,IAAK,KACLC,SAAU,KACVC,QAAS,KACTC,YAAa,KACbC,KAAM,MAER,EAAKC,IAAMC,IAAMC,YACjB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAXA,E,iFAaE,IAAD,OAClBC,SAASC,OAAS,aACdC,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAAAC,GACvC,EAAKC,SAAS,CACZjB,KAAMgB,EAASE,OAAOC,UACtBlB,IAAKe,EAASE,OAAOE,WAOvB,IAAMC,EAAG,4EAAwE,EAAKtB,MAAME,IAAnF,YAA0F,EAAKF,MAAMC,MAC9GsB,MAAMD,GACHE,MAAK,SAAAC,GACJ,OAAOA,EAAIC,UAEZF,MAAK,SAAAG,GACJC,QAAQC,IAAIF,GADA,IAEJxB,EAAawB,EAAbxB,SAFI,EAG2BwB,EAAKG,UAApC1B,EAHI,EAGJA,QAASC,EAHL,EAGKA,YACX0B,EAJM,EAGkBzB,KACN0B,QAAQ,KAAM,KAAKC,cACrCC,EAAiBC,KAAKC,MAAM,EAAK1B,UAAUL,IACjD,EAAKa,SAAS,CACZf,SAAUA,EACVC,QAASA,EACTC,YAAa6B,EACb5B,KAAMyB,UAKdM,MACE,qH,gCAKIC,GACR,OAAQ,EAAI,GAAMA,EAAI,M,+BAGtB,OACyB,OAAvBC,KAAKvC,MAAMwC,SACY,OAAvBD,KAAKvC,MAAMI,SACgB,OAA3BmC,KAAKvC,MAAMK,YAGT,6BACE,uBAAGoC,UAAU,iBAAb,gBAKJ,yBAAKA,UAAU,QACb,uBAAGA,UAAU,iBAAb,IAA+BF,KAAKvC,MAAMG,UAC1C,uBAAGsC,UAAU,kBAAkBF,KAAKvC,MAAMK,YAA1C,UACA,yBAAKoC,UAAU,cACZ,IACD,kBAAC,IAAD,CACEC,OAAO,MACPC,MAAM,MACNC,MAAM,QACNtC,KAAMiC,KAAKvC,MAAMM,QAIrB,uBAAGmC,UAAU,qBAAqBF,KAAKvC,MAAMI,c,GAlFbI,IAAMqC,WCc/BC,MAdf,WACE,OACE,yBAAKL,UAAU,OACb,gCACE,uBAAGA,UAAU,mBAAb,gBAEF,kBAAC,EAAD,MACA,4BAAQA,UAAU,UAChB,uBAAGA,UAAU,gBAAb,yCCCYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASzC,SAAS0C,eAAe,SD6H3C,kBAAmBxC,WACrBA,UAAUyC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.c92ef932.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Skycons from \"react-skycons\";\r\n\r\nexport default class WeatherApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      long: null,\r\n      lat: null,\r\n      timezone: null,\r\n      summary: null,\r\n      temperature: null,\r\n      icon: null\r\n    };\r\n    this.ref = React.createRef();\r\n    this.toCelsius = this.toCelsius.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.tittle = \"SkyChecker\";\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        this.setState({\r\n          long: position.coords.longitude,\r\n          lat: position.coords.latitude\r\n        });\r\n\r\n        //  const proxy = \"https://cors-anywhere.herokuapp.com/\"; // this can be deleted when official launch\r\n        //const api = `${proxy}https://api.darksky.net/forecast/9cf4efbb3abf34df3415d1db93aad9d6/${this.state.lat},${this.state.long}`;\r\n        // Use proxy if you want to Run it Locally ;)\r\n\r\n        const api = `https://api.darksky.net/forecast/9cf4efbb3abf34df3415d1db93aad9d6/${this.state.lat},${this.state.long}`;\r\n        fetch(api)\r\n          .then(res => {\r\n            return res.json();\r\n          })\r\n          .then(data => {\r\n            console.log(data);\r\n            const { timezone } = data;\r\n            const { summary, temperature, icon } = data.currently;\r\n            const iconModded = icon.replace(/-/g, \"_\").toUpperCase();\r\n            const temperatureCel = Math.floor(this.toCelsius(temperature));\r\n            this.setState({\r\n              timezone: timezone,\r\n              summary: summary,\r\n              temperature: temperatureCel,\r\n              icon: iconModded\r\n            });\r\n          });\r\n      });\r\n    } else {\r\n      alert(\r\n        \"You need to give Access To Your Location in Order to Track you and give you info about the weather in your city\"\r\n      );\r\n    }\r\n  }\r\n\r\n  toCelsius(f) {\r\n    return (5 / 9) * (f - 32);\r\n  }\r\n  render() {\r\n    if (\r\n      this.state.timzone === null ||\r\n      this.state.summary === null ||\r\n      this.state.temperature === null\r\n    ) {\r\n      return (\r\n        <div>\r\n          <p className=\"loadingScreen\">Loading ...</p>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"info\">\r\n        <p className=\"info__country\"> {this.state.timezone}</p>\r\n        <p className=\"info__celicius\">{this.state.temperature} Â°C</p>\r\n        <div className=\"info__icon\">\r\n          {\" \"}\r\n          <Skycons\r\n            height=\"200\"\r\n            width=\"200\"\r\n            color=\"black\"\r\n            icon={this.state.icon}\r\n          />\r\n        </div>\r\n\r\n        <p className=\"info__description\">{this.state.summary}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport WeatherApp from \"./components/weatherApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <p className=\"header__heading\">Sky Checker</p>\n      </header>\n      <WeatherApp />\n      <footer className=\"footer\">\n        <p className=\"footer__text\">Made by Dionysis Koufis With React</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}